import Head from "next/head";
import Router from "next/router";
import {
  Button,
  TextField,
  Paper,
  TableContainer,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
} from "@mui/material";
import prisma from "../lib/prisma";
import { DateTime } from "luxon";
import { useState, useEffect, useRef } from "react";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import startCron from "../miscellaneous/cron_job";
import styles from "@/styles/Home.module.css";

const darkTheme = createTheme({
  palette: {
    mode: "dark",
  },
});

type Props = {
  todos: any;
};

const Home: React.FC<Props> = (props) => {
  const startDateTimeRef = useRef<HTMLInputElement>(
    null
  ) as React.MutableRefObject<HTMLInputElement>;
  const endDateTimeRef = useRef<HTMLInputElement>(
    null
  ) as React.MutableRefObject<HTMLInputElement>;
  const [todo, setToDo] = useState<string>("");

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    const startsAt = DateTime.fromISO(startDateTimeRef.current?.value);
    const endsAt = DateTime.fromISO(endDateTimeRef.current?.value);

    try {
      const body = { name: todo, started_at: startsAt, ended_at: endsAt };
      await fetch("/api/todos", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
      Router.push("/");
    } catch (error) {
      console.error(error);
    }
  };

  const handleDelete = async (id: string) => {
    try {
      await fetch(`/api/${id}`, {
        method: "DELETE",
      });
      Router.push("/");
    } catch (error) {
      console.error(error);
    }
  };

  const closeHandler = () => {
    setToDo("");
  };

  return (
    <ThemeProvider theme={darkTheme}>
      <CssBaseline />
      <div className={styles.container}>
        <Head>
          <title>To-Do App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <h1 className={styles.title}>
            <a>To-Do</a> App
          </h1>

          <p className={styles.description}>
            Get started by adding{" "}
            <code className={styles.code}>a new task</code>
          </p>
          <form onSubmit={handleSubmit}>
            <TextField
              label="Add a new task"
              variant="outlined"
              id="outlined-basic"
              margin="normal"
              value={todo}
              onChange={(event) => setToDo(event.target.value)}
              fullWidth
              required
            />
            <br />
            <TextField
              label="Start Date and Time"
              type="datetime-local"
              variant="outlined"
              id="outlined-basic"
              margin="normal"
              inputRef={startDateTimeRef}
              fullWidth
              required
            />
            <TextField
              label="End Date and Time"
              type="datetime-local"
              variant="outlined"
              id="outlined-basic"
              margin="normal"
              inputRef={endDateTimeRef}
              fullWidth
              required
            />
            <br />
            <Button variant="contained" color="primary" type="submit">
              Add
            </Button>
          </form>
          <br />
          <TableContainer component={Paper} sx={{ width: "50%" }}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Task</TableCell>
                  <TableCell>Starts</TableCell>
                  <TableCell>Ends</TableCell>
                  <TableCell>Option</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {props.todos.map(
                  (todo: {
                    id: string;
                    name: string;
                    started_at: Date;
                    ended_at: Date;
                  }) => (
                    <TableRow key={todo.id}>
                      <TableCell>{todo.name}</TableCell>
                      <TableCell>
                        {DateTime.fromISO(
                          JSON.parse(JSON.stringify(todo.started_at))
                        ).toRelativeCalendar()}
                      </TableCell>
                      <TableCell>
                        {DateTime.fromISO(
                          JSON.parse(JSON.stringify(todo.ended_at))
                        ).toRelativeCalendar()}
                      </TableCell>
                      <TableCell>
                        <Button
                          variant="contained"
                          color="primary"
                          onClick={(event) => {
                            event.stopPropagation();
                            handleDelete(todo.id);
                          }}
                        >
                          Delete
                        </Button>
                      </TableCell>
                    </TableRow>
                  )
                )}
              </TableBody>
            </Table>
          </TableContainer>
        </main>

        <footer className={styles.footer}>Powered by Hein Htet Aung</footer>
      </div>
    </ThemeProvider>
  );
};

export const getServerSideProps = async () => {
  const todos = await prisma.todos.findMany({
    orderBy: { id: "desc" },
  });

  startCron();
  return {
    props: {
      todos: JSON.parse(JSON.stringify(todos)),
    },
  };
};

export default Home;
