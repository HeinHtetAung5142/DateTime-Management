import Head from "next/head";
import {
  Button,
  TextField,
  Paper,
  TableContainer,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
} from "@mui/material";
import { PrismaClient } from "@prisma/client";
import { DateTime } from "luxon";
import {
  useState,
  useEffect,
  useRef,
  JSXElementConstructor,
  Key,
  ReactElement,
  ReactFragment,
  ReactPortal,
} from "react";
import { AdapterLuxon } from "@mui/x-date-pickers/AdapterLuxon";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { DateTimePicker } from "@mui/x-date-pickers/DateTimePicker";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import styles from "@/styles/Home.module.css";

const darkTheme = createTheme({
  palette: {
    mode: "dark",
  },
});

// const prisma = new PrismaClient();

export default function Home() {
  const startDateTimeRef = useRef<HTMLInputElement>(
    null
  ) as React.MutableRefObject<HTMLInputElement>;
  const endDateTimeRef = useRef<HTMLInputElement>(
    null
  ) as React.MutableRefObject<HTMLInputElement>;
  const [todo, setToDo] = useState<string>("");
  const [todos, setTodos] = useState([]) as any;

  // useEffect(() => {
  //   onRun();
  // }, []);

  // const onRun = async () => {
  //   const data = await prisma.todos.findMany({
  //     orderBy: { id: "desc" },
  //   });
  //   setTodos(data);
  // };

  // const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
  //   event.preventDefault();

  //   const startsAt = startDateTimeRef.current?.value;

  //   const createToDo = await prisma.todos.create({
  //     data: {
  //       name: todo,
  //       started_at: startsAt,
  //       ended_at: endDateTimeRef.current?.value,
  //     },
  //   });

  //   // if (error) {
  //   //   console.log(error);
  //   // } else {
  //   //   onRun();
  //   //   closeHandler();
  //   // }
  //   console.log(createToDo);
  //   onRun();
  //   closeHandler();
  // };

  // const handleDelete = async (id: string) => {
  //   const deleteToDo = await prisma.todos.delete({
  //     where: {
  //       id,
  //     },
  //   });

  //   // if (error) {
  //   //   console.log(error);
  //   // } else {
  //   //   setTodos(todos.filter((todos) => todos.id !== id));
  //   // }
  //   console.log(deleteToDo);
  // };

  // const closeHandler = () => {
  //   setToDo("");
  // };

  return (
    <ThemeProvider theme={darkTheme}>
      <CssBaseline />
      <div className={styles.container}>
        <Head>
          <title>To-Do App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <h1 className={styles.title}>
            <a>To-Do</a> App
          </h1>

          <p className={styles.description}>
            Get started by adding{" "}
            <code className={styles.code}>a new task</code>
          </p>
          <form>
            <TextField
              label="Add a new task"
              variant="outlined"
              id="outlined-basic"
              margin="normal"
              value={todo}
              onChange={(event) => setToDo(event.target.value)}
              fullWidth
              required
            />
            <br />
            <TextField
              label="Start Date and Time"
              type="datetime-local"
              variant="outlined"
              id="outlined-basic"
              margin="normal"
              inputRef={startDateTimeRef}
              fullWidth
              required
            />
            <TextField
              label="End Date and Time"
              type="datetime-local"
              variant="outlined"
              id="outlined-basic"
              margin="normal"
              inputRef={endDateTimeRef}
              fullWidth
              required
            />
            {/* <LocalizationProvider dateAdapter={AdapterLuxon}>
              <DateTimePicker
                label="Start Date and Time"
                sx={{
                  margin: "10px",
                  width: "100%",
                }}
              />
            </LocalizationProvider>
            <br />
            <LocalizationProvider dateAdapter={AdapterLuxon}>
              <DateTimePicker
                label="End Date and Time"
                sx={{
                  margin: "10px",
                  width: "100%",
                }}
              />
            </LocalizationProvider> */}
            <br />
            <Button variant="contained" color="primary" type="submit">
              Add
            </Button>
          </form>
          <br />
          <TableContainer component={Paper} sx={{ width: "50%" }}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Task</TableCell>
                  <TableCell>Starts</TableCell>
                  <TableCell>Ends</TableCell>
                  <TableCell>Option</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {todos.map(
                  (todo: {
                    id: string;
                    name: string;
                    started_at: Date;
                    ended_at: Date;
                  }) => (
                    <TableRow key={todo.id}>
                      <TableCell>{todo.name}</TableCell>
                      <TableCell>
                        {DateTime.fromJSDate(
                          todo.started_at
                        ).toRelativeCalendar()}
                      </TableCell>
                      <TableCell>
                        {DateTime.fromJSDate(
                          todo.ended_at
                        ).toRelativeCalendar()}
                      </TableCell>
                      <TableCell>
                        <Button
                          variant="contained"
                          color="primary"
                          onClick={(event) => {
                            event.stopPropagation();
                          }}
                        >
                          Delete
                        </Button>
                      </TableCell>
                    </TableRow>
                  )
                )}
              </TableBody>
            </Table>
          </TableContainer>
        </main>

        <footer className={styles.footer}>Powered by Hein Htet Aung</footer>
      </div>
    </ThemeProvider>
  );
}
